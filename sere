#!/bin/sh
# sere

# Generated using mkx 2.3.0: https://github.com/remino/mkx

VERSION='2.0.1'

sere_main() {
	trap _exit INT TERM

	E_ARGS=16
	E_MISSING_DIR=17

	SCRIPT_INV="$(basename "$0")"
	SCRIPT_PATH="$(readlink -f "$0")"
	SCRIPT_NAME="$(basename "$SCRIPT_PATH")"

	CMD=
	DRY_RUN=0
	FIXED=0
	HIDDEN=0

	while getopts FHhnv OPT; do
		case $OPT in
			F) FIXED=1 ;;
			H) HIDDEN=1 ;;
			h) CMD=help ;;
			n) DRY_RUN=1 ;;
			v) CMD=version ;;
			*) _invalid_opt ;;
		esac
	done

	shift "$((OPTIND - 1))"

	if [ -z "$CMD" ]; then
		[ $# -eq 0 ] && CMD="help" || CMD="process"
	fi

	case "$CMD" in
		help | process | version) "sere_$CMD" "$@" ;;
		*) _invalid_cmd ;;
	esac

	_exit
}

sere_help() {
	cat << USAGE
$SCRIPT_NAME $VERSION

USAGE: $SCRIPT_INV [<options>] <pattern> <replacement> [<directory>]

Search and replace text in files in a directory using regular expressions.

If <directory> is not specified, the current directory is used.

OPTIONS:

	-F        Match using a fixed string, not a regular expression.
	-H        Include hidden files and directories.
	-h        Show this help screen.
	-n        Dry run. Show every file to be modified, but do not modify them.
	-v        Show script name and version number.

USAGE
}

sere_process() {
	PATTERN="$1"
	[ -z "$PATTERN" ] && _fatal "$E_ARGS" "Missing pattern"

	REPLACEMENT="$2"
	[ -z "$REPLACEMENT" ] && _fatal "$E_ARGS" "Missing replacement"

	DIR="$3"
	[ -z "$DIR" ] && DIR='.'

	[ -d "$DIR" ] || _fatal "$E_MISSING_DIR" "Directory not found: $DIR"

	if [ "$DRY_RUN" -ne 0 ]; then
		_find
		return
	fi

	if [ "$FIXED" -ne 0 ]; then
		_find | while read -r file; do
			_replace "s/$(_escape_regexp "$PATTERN")/$(_escape_regexp "$REPLACEMENT")/g" "$file"
		done

		return
	fi

	_find | while read -r file; do
		_replace "s/$PATTERN/$REPLACEMENT/g" "$file"
	done
}

sere_version() {
	_echo "$SCRIPT_NAME $VERSION"
}

_echo() {
	echo "$@"
}

_error() {
	_echo "$@" >&2
}

_escape_regexp() {
	echo "$1" | sed 's/[]\/$*.^|[]/\\&/g'
}

_exit() {
	exit_code=$?
	exit "$exit_code"
}

_fatal() {
	exit_code="$1"
	shift
	_error "$@"
	exit "$exit_code"
}

_find() {
	OPT_FIXED=
	[ "$FIXED" -ne 0 ] && OPT_FIXED='-F'

	if [ "$HIDDEN" -eq 0 ]; then
		find "$DIR" -not -path '*/\.*' -type f | while read -r file; do
			# shellcheck disable=SC2086
			grep -E -l $OPT_FIXED -- "$PATTERN" "$file"
		done

		return
	fi

	# shellcheck disable=SC2086
	grep -E -l -r $OPT_FIXED -- "$PATTERN" "$DIR"
}

_invalid_cmd() {
	_error "Invalid command: $CMD"
	_echo
	sere_help
	exit "$E_ARGS"
}

_invalid_opt() {
	_error "Invalid option: $OPT"
	_echo
	sere_help
	exit "$E_ARGS"
}

_replace() {
	perl -p -i -e "$@"
}

sere_main "$@"
